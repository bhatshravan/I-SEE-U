Video streamer -> https://github.com/video-dev/hls.js/
			      https://github.com/videojs/http-streaming
			      https://github.com/illuspas/Node-Media-Server
			      https://github.com/Bilibili/flv.js/
			      
			      
RTMP TO FLV streaming from file			     
ffmpeg -re -thread_queue_size 512 -hwaccel auto -i sample.mp4 -c:v libx264 -preset ultrafast -c:a aac -ar 10000 -f flv -r 60.0 rtmp://localhost/live/STREAM_NAME

ffmpeg -i input.mp4 -profile:v baseline -level 3.0 -s 640x360 -start_number 0 -hls_time 10 -hls_list_size 0 -f hls index.m3u8


ffmpeg -re -thread_queue_size 512 -hwaccel auto -i sample.mp4 \
 -c:v libx264 -pix_fmt yuv420p -profile:v baseline -preset ultrafast -c:a aac -ar 11025 -s 640x360 -f flv rtmp://localhost/live/st_low \
 -c:v libx264 -pix_fmt yuv420p -profile:v baseline -preset ultrafast -c:a aac -ar 11025 -s 842x480 -f flv rtmp://localhost/live/st_med \
 -c:v libx264 -pix_fmt yuv420p -profile:v baseline -preset ultrafast -c:a aac -ar 11025 -s 1280x720 -f flv rtmp://localhost/live/st_high \




VBS Streaming options
HTTP Live Streaming -> Developed by apple, needs to have manifest .m3u8 and also needs H.264 codec

Idea->
1. Capture all content over the webcam to an ffmpeg stream as and when required after user authorization, Spawn new thread for each viewer then close it once he leaves the stream.

ffmpeg -f v4l2 -framerate 25 -video_size 640x480 -i /dev/video0 output.mkv

2. Stream this over http after converting to flv using ffmpeg again
ffmpeg -re -i INPUT_FILE_NAME -c:v libx264 -preset superfast -tune zerolatency -c:a aac -ar 44100 -f flv rtmp://localhost/live/STREAM_NAME


3. Now use DASH or HLS to encode this to a video player, play this after authorization.
Refer to test.html or test2.html for exampless

4. Use web client to act as an additional dashboard and use it to act as notes for the doctor, live chat or get well messages etc.



To.Do ->
Merge the above 2 ffmpeg scripts




https://docs.peer5.com/guides/production-ready-hls-vod/